{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Headless Burp Provides a suite of extensions and a maven plugin to automate security tests using Burp Suite . Building security into your continuous delivery pipeline - Anand Sudhir Prayaga, Rita Nordtug from JavaZone 2015","title":"Introduction"},{"location":"#headless-burp","text":"Provides a suite of extensions and a maven plugin to automate security tests using Burp Suite .","title":"Headless Burp"},{"location":"#building-security-into-your-continuous-delivery-pipeline-anand-sudhir-prayaga-rita-nordtug-from-javazone-2015","text":"","title":"Building security into your continuous delivery pipeline - Anand Sudhir Prayaga, Rita Nordtug from JavaZone 2015"},{"location":"getting-started/","text":"Getting Started For instructions on how to install burp suite, see the installation guide . For detailed instructions on using the burp suite extensions, see Headless Burp Proxy and Headless Burp Scanner . For detailed instructions on using the headless burp maven plugin, see Burp Maven Plugin .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"For instructions on how to install burp suite, see the installation guide . For detailed instructions on using the burp suite extensions, see Headless Burp Proxy and Headless Burp Scanner . For detailed instructions on using the headless burp maven plugin, see Burp Maven Plugin .","title":"Getting Started"},{"location":"known-issues/","text":"Known Issues Limitations Limitations Manual configuration is still required What to proxy - scope Adding false positives Login macro(s)? Takes quite some time to run the scan Belongs in the nightly build Not a silver bullet.. The point of using a tool and automation, is to scale and enforce policy. You also have to embed security in your development work, educate yourself so that you can plug those security holes before they emerge. Known Issues I am sure there are many Please feel free to report any issues you face when using the extensions and the maven plugin by creating an issues on the github repo, here . TODO: Publish the maven plugin to maven central and jcenter Add more documentation ...","title":"Known Issues & Limitations"},{"location":"known-issues/#known-issues-limitations","text":"","title":"Known Issues &amp; Limitations"},{"location":"known-issues/#limitations","text":"Manual configuration is still required What to proxy - scope Adding false positives Login macro(s)? Takes quite some time to run the scan Belongs in the nightly build Not a silver bullet.. The point of using a tool and automation, is to scale and enforce policy. You also have to embed security in your development work, educate yourself so that you can plug those security holes before they emerge.","title":"Limitations"},{"location":"known-issues/#known-issues","text":"I am sure there are many Please feel free to report any issues you face when using the extensions and the maven plugin by creating an issues on the github repo, here .","title":"Known Issues"},{"location":"known-issues/#todo","text":"Publish the maven plugin to maven central and jcenter Add more documentation ...","title":"TODO:"},{"location":"background/automation/","text":"Burp and Automation Burp does not lend itself easily to automation. There is not built in way to run Burp headless, i.e on a server without a graphical user interface. This is a requirement if you want to automate the job. Burp documentation states that this might come in future versions. However, you can build an extension to burp and get burp to load it. Several programming languages are supported, including Java, Python and Ruby. And there are several developers who have already done this and made their extensions available through BApp Store . That is the Burp community for sharing these extensions. One of the most popular extensions for running Burp headless is Carbonator . By giving it a target scope, it spiders the scope and performs a scan and a HTML report is generated at the end. However, we wanted more! We wanted JUnit like output in Jenkins and a failed build whenever any vulnerabilities were found. And we also wanted the possibility to flag false positives. That is after a potential security hole has been found and reported, you investigate it in your code and find that no way this can happen, you want to configure this so that it will not be reported on the next run. And just performing a scan on a target doesnt really give that much in our javascript web application world today by reasons I\u2019ll get back to later. So we also had to be able to automatically proxy the application to build that sitemap. So we first decided to port Carbonator to Java (as we didnt know python very well), and built our own extension.","title":"Automation"},{"location":"background/automation/#burp-and-automation","text":"Burp does not lend itself easily to automation. There is not built in way to run Burp headless, i.e on a server without a graphical user interface. This is a requirement if you want to automate the job. Burp documentation states that this might come in future versions. However, you can build an extension to burp and get burp to load it. Several programming languages are supported, including Java, Python and Ruby. And there are several developers who have already done this and made their extensions available through BApp Store . That is the Burp community for sharing these extensions. One of the most popular extensions for running Burp headless is Carbonator . By giving it a target scope, it spiders the scope and performs a scan and a HTML report is generated at the end. However, we wanted more! We wanted JUnit like output in Jenkins and a failed build whenever any vulnerabilities were found. And we also wanted the possibility to flag false positives. That is after a potential security hole has been found and reported, you investigate it in your code and find that no way this can happen, you want to configure this so that it will not be reported on the next run. And just performing a scan on a target doesnt really give that much in our javascript web application world today by reasons I\u2019ll get back to later. So we also had to be able to automatically proxy the application to build that sitemap. So we first decided to port Carbonator to Java (as we didnt know python very well), and built our own extension.","title":"Burp and Automation"},{"location":"background/background/","text":"Background DevOps and continuous delivery are changing the way software is delivered, enabling businesses to deploy software far more frequently than in the past, thereby improving time-to-market, consistency and application stability. Automated unit, integration and acceptance tests, static code analysis ensure essential quality controls but they are focused on the functional aspects of the software, not on security. Current Scenario Our current scenario is that we do all our development in an agile fashion, but as we have very strict requirements to making our applications secure, a pen-test must be performed before releasing. This happens in the very end, making any findings risky to fix and have severe risk for delaying our release. We also have a limited pool of security experts, and may in some cases have a long wait ahead of us before pen-test can be performed. And we are the lucky ones. We have security experts testing our code. We all know that this is not the case for a lot of web-applications out there. Some have to hire expensive consultants and some doesnt do any security testing at all.","title":"Background"},{"location":"background/background/#background","text":"DevOps and continuous delivery are changing the way software is delivered, enabling businesses to deploy software far more frequently than in the past, thereby improving time-to-market, consistency and application stability. Automated unit, integration and acceptance tests, static code analysis ensure essential quality controls but they are focused on the functional aspects of the software, not on security.","title":"Background"},{"location":"background/background/#current-scenario","text":"Our current scenario is that we do all our development in an agile fashion, but as we have very strict requirements to making our applications secure, a pen-test must be performed before releasing. This happens in the very end, making any findings risky to fix and have severe risk for delaying our release. We also have a limited pool of security experts, and may in some cases have a long wait ahead of us before pen-test can be performed. And we are the lucky ones. We have security experts testing our code. We all know that this is not the case for a lot of web-applications out there. Some have to hire expensive consultants and some doesnt do any security testing at all.","title":"Current Scenario"},{"location":"background/burp/","text":"Burp Burp is an automated tool for finding those security holes that exists in your application. It is a tool that contains a lot of features for any type of security testing. We are not using the whole suite of components that Burp offers but are using those features that lend themselves to automation. First the proxy is used to map the application. In a manual security test you would use the proxy to intercept all your traffic while going through your applications functionality. Getting burp to build up a site map of all your requests and parameters. The spider can then be used as a tool to crawl through the rest of the application you missed in the proxying. A spider will take a URL and try to access all resources on that URL recursively until it has covered everything. This site map built by the Proxy and Spider is then what the Scanner uses to test your application for vulnerabilities. It performs this test by automatically attack your site using a number of known hacking techniques, and reports back to you any security issues it finds. And these are the three tools we wanted to automate in our PoC.","title":"Burp"},{"location":"background/burp/#burp","text":"Burp is an automated tool for finding those security holes that exists in your application. It is a tool that contains a lot of features for any type of security testing. We are not using the whole suite of components that Burp offers but are using those features that lend themselves to automation. First the proxy is used to map the application. In a manual security test you would use the proxy to intercept all your traffic while going through your applications functionality. Getting burp to build up a site map of all your requests and parameters. The spider can then be used as a tool to crawl through the rest of the application you missed in the proxying. A spider will take a URL and try to access all resources on that URL recursively until it has covered everything. This site map built by the Proxy and Spider is then what the Scanner uses to test your application for vulnerabilities. It performs this test by automatically attack your site using a number of known hacking techniques, and reports back to you any security issues it finds. And these are the three tools we wanted to automate in our PoC.","title":"Burp"},{"location":"background/our-goal/","text":"Our Goal We wanted the security-testing to become an integrated part of our development. And by doing that move it earlier in the development cycle. To make sure it would be a natural part of the development we wanted to move into the delivery pipeline as an automated job. Our security experts recommended Burp Suite as the best tool available for the job and this is the reason why we selected this over OWASP Zed Attack Proxy .","title":"Our Goal"},{"location":"background/our-goal/#our-goal","text":"We wanted the security-testing to become an integrated part of our development. And by doing that move it earlier in the development cycle. To make sure it would be a natural part of the development we wanted to move into the delivery pipeline as an automated job. Our security experts recommended Burp Suite as the best tool available for the job and this is the reason why we selected this over OWASP Zed Attack Proxy .","title":"Our Goal"},{"location":"release-notes/release-notes-1.0/","text":"Release Notes 1.0 Headless Burp (scanner) v1.0 has now been published to the BApp Store","title":"Release Notes"},{"location":"release-notes/release-notes-1.0/#release-notes-10","text":"Headless Burp (scanner) v1.0 has now been published to the BApp Store","title":"Release Notes 1.0"},{"location":"user-guide/installation/","text":"Prerequisites Before installing Burp Suite with headless-burp extensions, make sure you have Java 8 installed, you can verify if you're already good to go with the following commands: java -version headless-burp version requirements headless-burp requires java = 1.8 Installing Burp Download Burp Suite from here and follow instructions from getting started with Burp Suite Installing Burp on a headless machine java -jar -Xmx1024m /path/to/burp.jar Follow the instructions on the prompt. To install the license manually on a headless environment, refer the \"Manual Activation\" section from activating your burp license key","title":"Installation"},{"location":"user-guide/installation/#prerequisites","text":"Before installing Burp Suite with headless-burp extensions, make sure you have Java 8 installed, you can verify if you're already good to go with the following commands: java -version headless-burp version requirements headless-burp requires java = 1.8","title":"Prerequisites"},{"location":"user-guide/installation/#installing-burp","text":"Download Burp Suite from here and follow instructions from getting started with Burp Suite","title":"Installing Burp"},{"location":"user-guide/installation/#installing-burp-on-a-headless-machine","text":"java -jar -Xmx1024m /path/to/burp.jar Follow the instructions on the prompt. To install the license manually on a headless environment, refer the \"Manual Activation\" section from activating your burp license key","title":"Installing Burp on a headless machine"},{"location":"user-guide/burp-extensions/headless-burp-proxy/","text":"Headless Burp Proxy Provides an extension to Burp that allows you to run, stop and capture results from the Burp proxy tool in headless mode. Features Starts the burp proxy on a provided port (default 4646 ) Register a shutdown listener and wait for a shutdown request (default SHUTDOWN ) on port (default 4444 ). On receiving a shutdown request, saves the burp project file along with all the information regarding the proxied requests and responses, and finally shuts down Burp Start Burp Proxy On *nix: java -Xmx1G -Djava.awt.headless=true \\ -classpath headless-burp-proxy-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --project-file=project.burp On Cygwin: java -Xmx1G -Djava.awt.headless=true \\ -classpath headless-burp-proxy-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --project-file=project.burp Commandline Options --project-file=VAL Open the specified project file; this will be created as a new project if the file does not exist (mandatory) --proxyPort VAL Proxy port --shutdownPort VAL Shutdown port --shutdownKey VAL Shutdown key -p (--prompt) Indicates whether to prompt the user to confirm the shutdown (useful for debugging) -v (--verbose) Enable verbose output --diagnostics Print diagnostic information --use-defaults Start with default settings --collaborator-server Run in Collaborator server mode --collaborator-config=VAL Specify Collaborator server configuration file; defaults to collaborator.config --config-file=VAL Load the specified project configuration file(s); this option may be repeated to load multiple files --user-config-file=VAL Load the specified user configuration file(s); this option may be repeated to load multiple files --auto-repair Automatically repair a corrupted project file specified by the --project-file option Stop Burp Proxy echo SHUTDOWN /dev/tcp/127.0.0.1/4444 or echo SHUTDOWN | netcat 127.0.0.1 4444 or echo SHUTDOWN | ncat 127.0.0.1 4444","title":"Headless Burp Proxy"},{"location":"user-guide/burp-extensions/headless-burp-proxy/#headless-burp-proxy","text":"Provides an extension to Burp that allows you to run, stop and capture results from the Burp proxy tool in headless mode.","title":"Headless Burp Proxy"},{"location":"user-guide/burp-extensions/headless-burp-proxy/#features","text":"Starts the burp proxy on a provided port (default 4646 ) Register a shutdown listener and wait for a shutdown request (default SHUTDOWN ) on port (default 4444 ). On receiving a shutdown request, saves the burp project file along with all the information regarding the proxied requests and responses, and finally shuts down Burp","title":"Features"},{"location":"user-guide/burp-extensions/headless-burp-proxy/#start-burp-proxy","text":"On *nix: java -Xmx1G -Djava.awt.headless=true \\ -classpath headless-burp-proxy-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --project-file=project.burp On Cygwin: java -Xmx1G -Djava.awt.headless=true \\ -classpath headless-burp-proxy-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --project-file=project.burp","title":"Start Burp Proxy"},{"location":"user-guide/burp-extensions/headless-burp-proxy/#commandline-options","text":"--project-file=VAL Open the specified project file; this will be created as a new project if the file does not exist (mandatory) --proxyPort VAL Proxy port --shutdownPort VAL Shutdown port --shutdownKey VAL Shutdown key -p (--prompt) Indicates whether to prompt the user to confirm the shutdown (useful for debugging) -v (--verbose) Enable verbose output --diagnostics Print diagnostic information --use-defaults Start with default settings --collaborator-server Run in Collaborator server mode --collaborator-config=VAL Specify Collaborator server configuration file; defaults to collaborator.config --config-file=VAL Load the specified project configuration file(s); this option may be repeated to load multiple files --user-config-file=VAL Load the specified user configuration file(s); this option may be repeated to load multiple files --auto-repair Automatically repair a corrupted project file specified by the --project-file option","title":"Commandline Options"},{"location":"user-guide/burp-extensions/headless-burp-proxy/#stop-burp-proxy","text":"echo SHUTDOWN /dev/tcp/127.0.0.1/4444 or echo SHUTDOWN | netcat 127.0.0.1 4444 or echo SHUTDOWN | ncat 127.0.0.1 4444","title":"Stop Burp Proxy"},{"location":"user-guide/burp-extensions/headless-burp-scanner/","text":"Headless Burp Scanner Provides an extension to Burp that allows you to run Burp Suite's Spider and Scanner tools in headless mode via command-line. However, it can do more! It can produce a JUnit like report which in turn could instruct the CI server (maybe Jenkins ) to mark the build as \"failed\" whenever any vulnerabilities are found. You can also mark some issues as false positives and those will not be reported anymore on the next scan reports. Build ./mvnw The extension is packaged as a fat jar at target/headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar Usage Bu8ld the extension as shown above or install it from the BApp Store Using the extension jar On *nix: java -Xmx1G -Djava.awt.headless = true \\ -classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --unpause-spider-and-scanner \\ --project-file = project.burp -c config.xml On Cygwin: java -Xmx1G -Djava.awt.headless = true \\ -classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --unpause-spider-and-scanner \\ --project-file = project.burp -c config.xml Using the extension from BApp Store java -Xmx1G -Djava.awt.headless = true \\ -classpath burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --unpause-spider-and-scanner \\ --project-file = project.burp -c config.xml On Cygwin: java -Xmx1G -Djava.awt.headless = true \\ -classpath burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --unpause-spider-and-scanner \\ --project-file = project.burp -c config.xml Configuration ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType !-- JUNIT|HTML|XML -- targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap !-- atleast one of targetSitemap or scope must be specified -- scope !-- atleast one of targetSitemap or scope must be specified -- url ![CDATA[http://localhost:5432/]] /url !-- multiple allowed -- exclusions !-- optional -- exclusion ![CDATA[localhost:5432/#/logout]] /exclusion /exclusions /scope false-positives !-- optional -- issue type 5244416 /type path .* /path /issue issue type 5247488 /type path .*bower_components.* /path /issue /false-positives /config For an example configuration file, see config.xml and headless-burp-scanner-config.xsd for the xsd Command-line options --project-file=VAL Open the specified project file; this will be created as a new project if the file does not exist (mandatory) -c (--config) file Configuration file (mandatory) -p (--prompt) Indicates whether to prompt the user to confirm the shutdown (useful for debugging) -v (--verbose) Enable verbose output --diagnostics Print diagnostic information --use-defaults Start with default settings --collaborator-server Run in Collaborator server mode --collaborator-config=VAL Specify Collaborator server configuration file; defaults to collaborator.config --config-file=VAL Load the specified project configuration file(s); this option may be repeated to load multiple files --user-config-file=VAL Load the specified user configuration file(s); this option may be repeated to load multiple files --auto-repair Automatically repair a corrupted project file specified by the --project-file option Scenarios The extension has been designed to be versatile and support several scenarios Scenario A: Scan URL(s) for security issues using Burp Create a file - config.xml like below and add the URL(s) to be scanned to the scope. ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap scope url ![CDATA[http://localhost:5432/auth]] /url url ![CDATA[http://localhost:5432/users]] /url url ![CDATA[http://localhost:5432/users/1]] /url url ![CDATA[http://localhost:5432/users?search=asd]] /url url ![CDATA[http://localhost:5432/bar/foo]] /url /scope /config Run as shown in the usage section Scenario B: Scan URL(s) for security issues using Burp but exclude scanning of certain paths Add an exclusions block to the configuration file. ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap scope url ![CDATA[http://localhost:5432/auth]] /url url ![CDATA[http://localhost:5432/users]] /url url ![CDATA[http://localhost:5432/users/1]] /url url ![CDATA[http://localhost:5432/users?search=asd]] /url url ![CDATA[http://localhost:5432/bar/foo]] /url exclusions exclusion ![CDATA[localhost:5432/#/logout]] /exclusion exclusion ![CDATA[localhost:5432/#/users/delete]] /exclusion exclusion ![CDATA[localhost:5432/#/creepy/crawly]] /exclusion /exclusions /scope /config Run as shown in the usage section Scenario C: Scan URL(s) for security issues using Burp but suppress false positives from the scan report Add a false-positives block with the issue type and path (these can be retrieved from a burp scan report) to the configuration file. You can find more details about Issue Definitions here ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap scope url ![CDATA[http://localhost:5432/auth]] /url url ![CDATA[http://localhost:5432/users]] /url url ![CDATA[http://localhost:5432/users/1]] /url url ![CDATA[http://localhost:5432/users?search=asd]] /url url ![CDATA[http://localhost:5432/bar/foo]] /url exclusions exclusion ![CDATA[localhost:5432/#/logout]] /exclusion exclusion ![CDATA[localhost:5432/#/users/delete]] /exclusion exclusion ![CDATA[localhost:5432/#/creepy/crawly]] /exclusion /exclusions false-positives issue type 5244416 /type path .* /path /issue issue type 5247488 /type path .*bower_components.* /path /issue /false-positives /scope /config Run as shown in the usage section Scenario D: Scan more than just GET requests - Use request.response data derived from running functional/integration tests as input to the scan Sometimes, just spidering a target scope and and performing on a scope of URLs doesnt give much value. For e.g. when scanning a web application where routing is handled using JavaScript. Burp scans can discover more if it can scan more \"real-world\" requests and responses. This way, it can attack the target URLs more effectively and potentially discover more than a shot in the dark spider + scan approach. To handle such cases, it would be best to let the burp proxy intercept some real traffic to the target and build up a sitemap for itself. The Headless Burp Proxy extension provides an simple way to achieve this. Follow instructions at Headless Burp Proxy and start up burp proxy and remember to set the --project-file option. This is where the \"seed\" data for scanning is going to be stored. Configure your functional/integration tests to go through the burp proxy (defaults to 4646 if you use the extension) by setting HTTP_PROXY or similar. Run the functional/integration tests against the target. Create a config.xml with the targetSitemap (typically, the base URL of the application), scope, exclusions, false-positives etc. ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap scope url ![CDATA[http://localhost:5432]] /url exclusions exclusion ![CDATA[localhost:5432/#/logout]] /exclusion /exclusions false-positives issue type 5244416 /type path .* /path /issue /false-positives /scope /config Run as shown in the usage section and remember to set the --project-file option tl;dr; The headless burp scanner plugin can do these Run burp scan in headless or GUI mode Specify target sitemap and add URL(s) to Burp's target scope Use the \"seed\" request/response data generated by any integration/functional tests you might have Mark issues as false positives, these will not be reported in the scan report anymore. Spider the target scope. Actively scan the target scope. Generate a scan report in JUnit/HTML/XML format. Shut down Burp","title":"Headless Burp Scanner"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#headless-burp-scanner","text":"Provides an extension to Burp that allows you to run Burp Suite's Spider and Scanner tools in headless mode via command-line. However, it can do more! It can produce a JUnit like report which in turn could instruct the CI server (maybe Jenkins ) to mark the build as \"failed\" whenever any vulnerabilities are found. You can also mark some issues as false positives and those will not be reported anymore on the next scan reports.","title":"Headless Burp Scanner"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#build","text":"./mvnw The extension is packaged as a fat jar at target/headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar","title":"Build"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#usage","text":"Bu8ld the extension as shown above or install it from the BApp Store","title":"Usage"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#using-the-extension-jar","text":"On *nix: java -Xmx1G -Djava.awt.headless = true \\ -classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --unpause-spider-and-scanner \\ --project-file = project.burp -c config.xml On Cygwin: java -Xmx1G -Djava.awt.headless = true \\ -classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --unpause-spider-and-scanner \\ --project-file = project.burp -c config.xml","title":"Using the extension jar"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#using-the-extension-from-bapp-store","text":"java -Xmx1G -Djava.awt.headless = true \\ -classpath burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --unpause-spider-and-scanner \\ --project-file = project.burp -c config.xml On Cygwin: java -Xmx1G -Djava.awt.headless = true \\ -classpath burpsuite_pro_v1.7.31.jar burp.StartBurp \\ --unpause-spider-and-scanner \\ --project-file = project.burp -c config.xml","title":"Using the extension from BApp Store"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#configuration","text":"?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType !-- JUNIT|HTML|XML -- targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap !-- atleast one of targetSitemap or scope must be specified -- scope !-- atleast one of targetSitemap or scope must be specified -- url ![CDATA[http://localhost:5432/]] /url !-- multiple allowed -- exclusions !-- optional -- exclusion ![CDATA[localhost:5432/#/logout]] /exclusion /exclusions /scope false-positives !-- optional -- issue type 5244416 /type path .* /path /issue issue type 5247488 /type path .*bower_components.* /path /issue /false-positives /config For an example configuration file, see config.xml and headless-burp-scanner-config.xsd for the xsd","title":"Configuration"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#command-line-options","text":"--project-file=VAL Open the specified project file; this will be created as a new project if the file does not exist (mandatory) -c (--config) file Configuration file (mandatory) -p (--prompt) Indicates whether to prompt the user to confirm the shutdown (useful for debugging) -v (--verbose) Enable verbose output --diagnostics Print diagnostic information --use-defaults Start with default settings --collaborator-server Run in Collaborator server mode --collaborator-config=VAL Specify Collaborator server configuration file; defaults to collaborator.config --config-file=VAL Load the specified project configuration file(s); this option may be repeated to load multiple files --user-config-file=VAL Load the specified user configuration file(s); this option may be repeated to load multiple files --auto-repair Automatically repair a corrupted project file specified by the --project-file option","title":"Command-line options"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#scenarios","text":"The extension has been designed to be versatile and support several scenarios","title":"Scenarios"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#scenario-a-scan-urls-for-security-issues-using-burp","text":"Create a file - config.xml like below and add the URL(s) to be scanned to the scope. ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap scope url ![CDATA[http://localhost:5432/auth]] /url url ![CDATA[http://localhost:5432/users]] /url url ![CDATA[http://localhost:5432/users/1]] /url url ![CDATA[http://localhost:5432/users?search=asd]] /url url ![CDATA[http://localhost:5432/bar/foo]] /url /scope /config Run as shown in the usage section","title":"Scenario A: Scan URL(s) for security issues using Burp"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#scenario-b-scan-urls-for-security-issues-using-burp-but-exclude-scanning-of-certain-paths","text":"Add an exclusions block to the configuration file. ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap scope url ![CDATA[http://localhost:5432/auth]] /url url ![CDATA[http://localhost:5432/users]] /url url ![CDATA[http://localhost:5432/users/1]] /url url ![CDATA[http://localhost:5432/users?search=asd]] /url url ![CDATA[http://localhost:5432/bar/foo]] /url exclusions exclusion ![CDATA[localhost:5432/#/logout]] /exclusion exclusion ![CDATA[localhost:5432/#/users/delete]] /exclusion exclusion ![CDATA[localhost:5432/#/creepy/crawly]] /exclusion /exclusions /scope /config Run as shown in the usage section","title":"Scenario B: Scan URL(s) for security issues using Burp but exclude scanning of certain paths"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#scenario-c-scan-urls-for-security-issues-using-burp-but-suppress-false-positives-from-the-scan-report","text":"Add a false-positives block with the issue type and path (these can be retrieved from a burp scan report) to the configuration file. You can find more details about Issue Definitions here ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap scope url ![CDATA[http://localhost:5432/auth]] /url url ![CDATA[http://localhost:5432/users]] /url url ![CDATA[http://localhost:5432/users/1]] /url url ![CDATA[http://localhost:5432/users?search=asd]] /url url ![CDATA[http://localhost:5432/bar/foo]] /url exclusions exclusion ![CDATA[localhost:5432/#/logout]] /exclusion exclusion ![CDATA[localhost:5432/#/users/delete]] /exclusion exclusion ![CDATA[localhost:5432/#/creepy/crawly]] /exclusion /exclusions false-positives issue type 5244416 /type path .* /path /issue issue type 5247488 /type path .*bower_components.* /path /issue /false-positives /scope /config Run as shown in the usage section","title":"Scenario C: Scan URL(s) for security issues using Burp but suppress false positives from the scan report"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#scenario-d-scan-more-than-just-get-requests-use-requestresponse-data-derived-from-running-functionalintegration-tests-as-input-to-the-scan","text":"Sometimes, just spidering a target scope and and performing on a scope of URLs doesnt give much value. For e.g. when scanning a web application where routing is handled using JavaScript. Burp scans can discover more if it can scan more \"real-world\" requests and responses. This way, it can attack the target URLs more effectively and potentially discover more than a shot in the dark spider + scan approach. To handle such cases, it would be best to let the burp proxy intercept some real traffic to the target and build up a sitemap for itself. The Headless Burp Proxy extension provides an simple way to achieve this. Follow instructions at Headless Burp Proxy and start up burp proxy and remember to set the --project-file option. This is where the \"seed\" data for scanning is going to be stored. Configure your functional/integration tests to go through the burp proxy (defaults to 4646 if you use the extension) by setting HTTP_PROXY or similar. Run the functional/integration tests against the target. Create a config.xml with the targetSitemap (typically, the base URL of the application), scope, exclusions, false-positives etc. ?xml version= 1.0 encoding= UTF-8 ? config xmlns= http://nets.eu/burp/config reportType HTML /reportType targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap scope url ![CDATA[http://localhost:5432]] /url exclusions exclusion ![CDATA[localhost:5432/#/logout]] /exclusion /exclusions false-positives issue type 5244416 /type path .* /path /issue /false-positives /scope /config Run as shown in the usage section and remember to set the --project-file option","title":"Scenario D: Scan more than just GET requests - Use request.response data derived from running functional/integration tests as input to the scan"},{"location":"user-guide/burp-extensions/headless-burp-scanner/#tldr","text":"The headless burp scanner plugin can do these Run burp scan in headless or GUI mode Specify target sitemap and add URL(s) to Burp's target scope Use the \"seed\" request/response data generated by any integration/functional tests you might have Mark issues as false positives, these will not be reported in the scan report anymore. Spider the target scope. Actively scan the target scope. Generate a scan report in JUnit/HTML/XML format. Shut down Burp","title":"tl;dr;"},{"location":"user-guide/maven-plugin/usage/","text":"Burp Maven Plugin Maven plugin that allows you to run Burp Suite's Proxy and Scanner tools in headless mode. The plugin is essentially a wrapper around the Headless Burp Proxy and Headless Burp Scanner extensions. It offers easy way to integrate security testing using Burp Suite into the project build lifecycle. Full example build ... plugins ... plugin groupId eu.nets.burp /groupId artifactId burp-maven-plugin /artifactId version master-SNAPSHOT /version configuration burpSuite burp/burpsuite_pro_v1.7.31.jar /burpSuite burpProjectFile target/headless-burp-project.burp /burpProjectFile burpConfig burp/config.xml /burpConfig headless true /headless promptOnExit false /promptOnExit verbose true /verbose skip false /skip /configuration executions execution id start-burp-proxy /id phase pre-integration-test /phase goals goal start-proxy /goal /goals /execution execution id stop-burp-proxy /id phase post-integration-test /phase goals goal stop-proxy /goal /goals /execution execution id start-burp-scan /id phase verify /phase goals goal start-scan /goal /goals /execution /executions /plugin ... /plugins ... /build","title":"Usage"},{"location":"user-guide/maven-plugin/usage/#burp-maven-plugin","text":"Maven plugin that allows you to run Burp Suite's Proxy and Scanner tools in headless mode. The plugin is essentially a wrapper around the Headless Burp Proxy and Headless Burp Scanner extensions. It offers easy way to integrate security testing using Burp Suite into the project build lifecycle.","title":"Burp Maven Plugin"},{"location":"user-guide/maven-plugin/usage/#full-example","text":"build ... plugins ... plugin groupId eu.nets.burp /groupId artifactId burp-maven-plugin /artifactId version master-SNAPSHOT /version configuration burpSuite burp/burpsuite_pro_v1.7.31.jar /burpSuite burpProjectFile target/headless-burp-project.burp /burpProjectFile burpConfig burp/config.xml /burpConfig headless true /headless promptOnExit false /promptOnExit verbose true /verbose skip false /skip /configuration executions execution id start-burp-proxy /id phase pre-integration-test /phase goals goal start-proxy /goal /goals /execution execution id stop-burp-proxy /id phase post-integration-test /phase goals goal stop-proxy /goal /goals /execution execution id start-burp-scan /id phase verify /phase goals goal start-scan /goal /goals /execution /executions /plugin ... /plugins ... /build","title":"Full example"}]}