{
    "docs": [
        {
            "location": "/", 
            "text": "Headless Burp\n\n\nProvides a suite of extensions and a maven plugin to automate security tests using \nBurp Suite\n.\n\n\nBuilding security into your continuous delivery pipeline - Anand Sudhir Prayaga, Rita Nordtug\n from \nJavaZone 2015", 
            "title": "Introduction"
        }, 
        {
            "location": "/#headless-burp", 
            "text": "Provides a suite of extensions and a maven plugin to automate security tests using  Burp Suite .", 
            "title": "Headless Burp"
        }, 
        {
            "location": "/#building-security-into-your-continuous-delivery-pipeline-anand-sudhir-prayaga-rita-nordtug-from-javazone-2015", 
            "text": "", 
            "title": "Building security into your continuous delivery pipeline - Anand Sudhir Prayaga, Rita Nordtug from JavaZone 2015"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started\n\n\nFor instructions on how to install burp suite, see the \ninstallation guide\n.\n\n\nFor detailed instructions on using the burp suite extensions, see \nHeadless Burp Proxy\n and \nHeadless Burp Scanner\n.\n\n\nFor detailed instructions on using the headless burp maven plugin, see \nBurp Maven Plugin\n.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "For instructions on how to install burp suite, see the  installation guide .  For detailed instructions on using the burp suite extensions, see  Headless Burp Proxy  and  Headless Burp Scanner .  For detailed instructions on using the headless burp maven plugin, see  Burp Maven Plugin .", 
            "title": "Getting Started"
        }, 
        {
            "location": "/background/background/", 
            "text": "Background\n\n\nDevOps and continuous delivery are changing the way software is delivered, enabling businesses to deploy software far more frequently than in the past, thereby improving time-to-market, consistency and application stability. \n\n\nAutomated unit, integration and acceptance tests, static code analysis ensure essential quality controls but they are focused on the functional aspects of the software, not on security.\n\n\nCurrent Scenario\n\n\nOur current scenario is that we do all our development in an agile fashion, but as we have very strict requirements to making our applications secure,  a pen-test must be performed before releasing. \n\n\nThis happens in the very end, making any findings risky to fix and have severe risk for delaying our release. \n\n\nWe also have a limited pool of security experts, and may in some cases have a long wait ahead of us before pen-test can be performed. \n\n\nAnd we are the lucky ones. We have security experts testing our code. We all know that this is not the case for a lot of web-applications out there. Some have to hire expensive consultants and some doesnt do any security testing at all.", 
            "title": "Background"
        }, 
        {
            "location": "/background/background/#background", 
            "text": "DevOps and continuous delivery are changing the way software is delivered, enabling businesses to deploy software far more frequently than in the past, thereby improving time-to-market, consistency and application stability.   Automated unit, integration and acceptance tests, static code analysis ensure essential quality controls but they are focused on the functional aspects of the software, not on security.", 
            "title": "Background"
        }, 
        {
            "location": "/background/background/#current-scenario", 
            "text": "Our current scenario is that we do all our development in an agile fashion, but as we have very strict requirements to making our applications secure,  a pen-test must be performed before releasing.   This happens in the very end, making any findings risky to fix and have severe risk for delaying our release.   We also have a limited pool of security experts, and may in some cases have a long wait ahead of us before pen-test can be performed.   And we are the lucky ones. We have security experts testing our code. We all know that this is not the case for a lot of web-applications out there. Some have to hire expensive consultants and some doesnt do any security testing at all.", 
            "title": "Current Scenario"
        }, 
        {
            "location": "/background/our-goal/", 
            "text": "Our Goal\n\n\nWe wanted the  security-testing to become an integrated part of our development. And by doing that move it earlier in the development cycle. \n\n\nTo make sure it would be a natural part of the development we wanted to move into the delivery pipeline as an automated job. \n\n\nOur security experts recommended \nBurp Suite\n as the best tool available for the job and this is the reason why we selected this over \nOWASP Zed Attack Proxy\n.", 
            "title": "Our Goal"
        }, 
        {
            "location": "/background/our-goal/#our-goal", 
            "text": "We wanted the  security-testing to become an integrated part of our development. And by doing that move it earlier in the development cycle.   To make sure it would be a natural part of the development we wanted to move into the delivery pipeline as an automated job.   Our security experts recommended  Burp Suite  as the best tool available for the job and this is the reason why we selected this over  OWASP Zed Attack Proxy .", 
            "title": "Our Goal"
        }, 
        {
            "location": "/background/burp/", 
            "text": "Burp\n\n\nBurp is an automated tool for finding those security holes that exists in your application. It is a tool that contains a lot of features for any type of security testing. We are not using the whole suite of components that Burp offers but are using those features that lend themselves to automation. \n\n\nFirst the proxy is used to map the application. In a manual security test you would use the proxy to intercept all your traffic while going through your applications functionality. Getting burp to build up a site map of all your requests and parameters. \n\n\nThe spider can then be used as a tool to crawl through the rest of the application you missed in the proxying. A spider will take a URL and try to access all resources on that URL recursively until it has covered everything. \n\n\nThis site map built by the proxy and spider is then what the scanner uses to test your application for vulnerabilities. It performs this test by automatically attack your site using a number of known hacking techniques, and reports back to you any security issues it finds. \n\n\nAnd these are the three tools we wanted to automate in our PoC.", 
            "title": "Burp"
        }, 
        {
            "location": "/background/burp/#burp", 
            "text": "Burp is an automated tool for finding those security holes that exists in your application. It is a tool that contains a lot of features for any type of security testing. We are not using the whole suite of components that Burp offers but are using those features that lend themselves to automation.   First the proxy is used to map the application. In a manual security test you would use the proxy to intercept all your traffic while going through your applications functionality. Getting burp to build up a site map of all your requests and parameters.   The spider can then be used as a tool to crawl through the rest of the application you missed in the proxying. A spider will take a URL and try to access all resources on that URL recursively until it has covered everything.   This site map built by the proxy and spider is then what the scanner uses to test your application for vulnerabilities. It performs this test by automatically attack your site using a number of known hacking techniques, and reports back to you any security issues it finds.   And these are the three tools we wanted to automate in our PoC.", 
            "title": "Burp"
        }, 
        {
            "location": "/background/automation/", 
            "text": "Burp and Automation\n\n\nBurp does not lend itself easily to automation. There is not built in way to run Burp headless, i.e on a server without a graphical user interface. This is a requirement if you want to automate the job. Burp documentation states that this might come in future versions. \n\n\nHowever, you can build an extension to burp and get burp to load it. Several programming languages are supported, including Java, Python and Ruby. \n\n\nAnd there are several developers who have already done this and made their extensions available through \nBApp Store\n. That is the Burp community for sharing these extensions. \n\n\nOne of the most popular extensions for running Burp headless is \nCarbonator\n. By giving it a target scope, it spiders the scope and performs a scan and a HTML report is generated at the end.  \n\n\nHowever, we wanted more!\nWe wanted JUnit like output in Jenkins and a failed build whenever any vulnerabilities were found. And we also wanted the possibility to flag false positives. That is after a potential security hole has been found and reported, you investigate it in your code and find that no way this can happen, you want to configure this so that it will not be reported on the next run. \n\n\nAnd just performing a scan on a target doesnt really give that much in our javascript web application world today by reasons I\u2019ll get back to later. So we also had to be able to automatically proxy the application to build that sitemap. \n\n\nSo we first decided to port \nCarbonator\n to Java (as we didnt know python very well), and built our own extension.", 
            "title": "Automation"
        }, 
        {
            "location": "/background/automation/#burp-and-automation", 
            "text": "Burp does not lend itself easily to automation. There is not built in way to run Burp headless, i.e on a server without a graphical user interface. This is a requirement if you want to automate the job. Burp documentation states that this might come in future versions.   However, you can build an extension to burp and get burp to load it. Several programming languages are supported, including Java, Python and Ruby.   And there are several developers who have already done this and made their extensions available through  BApp Store . That is the Burp community for sharing these extensions.   One of the most popular extensions for running Burp headless is  Carbonator . By giving it a target scope, it spiders the scope and performs a scan and a HTML report is generated at the end.    However, we wanted more!\nWe wanted JUnit like output in Jenkins and a failed build whenever any vulnerabilities were found. And we also wanted the possibility to flag false positives. That is after a potential security hole has been found and reported, you investigate it in your code and find that no way this can happen, you want to configure this so that it will not be reported on the next run.   And just performing a scan on a target doesnt really give that much in our javascript web application world today by reasons I\u2019ll get back to later. So we also had to be able to automatically proxy the application to build that sitemap.   So we first decided to port  Carbonator  to Java (as we didnt know python very well), and built our own extension.", 
            "title": "Burp and Automation"
        }, 
        {
            "location": "/user-guide/installation/", 
            "text": "Prerequisites\n\n\nBefore installing \nBurp Suite\n with headless-burp extensions, make sure you have Java 8 installed, you can verify if you're already good to go with the following commands: \n\n\njava -version\n\n\n\n\n\n\nheadless-burp version requirements\n\n\nheadless-burp requires java \n= 1.8\n\n\n\n\nInstalling Burp\n\n\nDownload Burp Suite from \nhere\n and follow instructions from \ngetting started with Burp Suite\n\n\nInstalling Burp on a headless machine\n\n\njava -jar -Xmx1024m /path/to/burp.jar\n\n\n\n\nFollow the instructions on the prompt. To install the license manually on a headless environment, refer the \"Manual Activation\" section from \nactivating your burp license key", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/installation/#prerequisites", 
            "text": "Before installing  Burp Suite  with headless-burp extensions, make sure you have Java 8 installed, you can verify if you're already good to go with the following commands:   java -version   headless-burp version requirements  headless-burp requires java  = 1.8", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/user-guide/installation/#installing-burp", 
            "text": "Download Burp Suite from  here  and follow instructions from  getting started with Burp Suite", 
            "title": "Installing Burp"
        }, 
        {
            "location": "/user-guide/installation/#installing-burp-on-a-headless-machine", 
            "text": "java -jar -Xmx1024m /path/to/burp.jar  Follow the instructions on the prompt. To install the license manually on a headless environment, refer the \"Manual Activation\" section from  activating your burp license key", 
            "title": "Installing Burp on a headless machine"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/", 
            "text": "Headless Burp Proxy\n\n\nProvides an extension to Burp that allows you to run, stop and capture results from the Burp proxy tool in headless mode.\n\n\nFeatures\n\n\n\n\nStarts the burp proxy on a provided port (default \n4646\n)\n\n\nRegister a shutdown listener and wait for a shutdown request (default \nSHUTDOWN\n) on port (default \n4444\n).\n\n\nOn receiving a shutdown request, saves the burp project file along with all the information regarding the proxied requests and responses, and finally shuts down Burp\n\n\n\n\nStart Burp Proxy\n\n\nOn *nix:\n\n\njava -Xmx1G -Djava.awt.headless=true \\\n-classpath headless-burp-proxy-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.7.31.jar burp.StartBurp \\\n--project-file=project.burp\n\n\n\n\nOn Cygwin:\n\n\njava -Xmx1G -Djava.awt.headless=true \\\n-classpath \nheadless-burp-proxy-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.7.31.jar\n burp.StartBurp \\\n--project-file=project.burp\n\n\n\n\nCommandline Options\n\n\n--project-file=VAL          Open the specified project file; this will be created as a new project if the file does not exist (mandatory)\n--proxyPort VAL             Proxy port\n--shutdownPort VAL          Shutdown port\n--shutdownKey VAL           Shutdown key\n-p (--prompt)               Indicates whether to prompt the user to confirm the shutdown (useful for debugging)\n-v (--verbose)              Enable verbose output\n\n--diagnostics               Print diagnostic information\n--use-defaults              Start with default settings\n--collaborator-server       Run in Collaborator server mode\n--collaborator-config=VAL   Specify Collaborator server configuration file; defaults to collaborator.config\n--config-file=VAL           Load the specified project configuration file(s); this option may be repeated to load multiple files\n--user-config-file=VAL      Load the specified user configuration file(s); this option may be repeated to load multiple files\n--auto-repair               Automatically repair a corrupted project file specified by the --project-file option\n\n\n\n\nStop Burp Proxy\n\n\necho SHUTDOWN \n /dev/tcp/127.0.0.1/4444\nor\necho SHUTDOWN | netcat 127.0.0.1 4444\nor\necho SHUTDOWN | ncat 127.0.0.1 4444", 
            "title": "Headless Burp Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#headless-burp-proxy", 
            "text": "Provides an extension to Burp that allows you to run, stop and capture results from the Burp proxy tool in headless mode.", 
            "title": "Headless Burp Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#features", 
            "text": "Starts the burp proxy on a provided port (default  4646 )  Register a shutdown listener and wait for a shutdown request (default  SHUTDOWN ) on port (default  4444 ).  On receiving a shutdown request, saves the burp project file along with all the information regarding the proxied requests and responses, and finally shuts down Burp", 
            "title": "Features"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#start-burp-proxy", 
            "text": "On *nix:  java -Xmx1G -Djava.awt.headless=true \\\n-classpath headless-burp-proxy-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.7.31.jar burp.StartBurp \\\n--project-file=project.burp  On Cygwin:  java -Xmx1G -Djava.awt.headless=true \\\n-classpath  headless-burp-proxy-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.7.31.jar  burp.StartBurp \\\n--project-file=project.burp", 
            "title": "Start Burp Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#commandline-options", 
            "text": "--project-file=VAL          Open the specified project file; this will be created as a new project if the file does not exist (mandatory)\n--proxyPort VAL             Proxy port\n--shutdownPort VAL          Shutdown port\n--shutdownKey VAL           Shutdown key\n-p (--prompt)               Indicates whether to prompt the user to confirm the shutdown (useful for debugging)\n-v (--verbose)              Enable verbose output\n\n--diagnostics               Print diagnostic information\n--use-defaults              Start with default settings\n--collaborator-server       Run in Collaborator server mode\n--collaborator-config=VAL   Specify Collaborator server configuration file; defaults to collaborator.config\n--config-file=VAL           Load the specified project configuration file(s); this option may be repeated to load multiple files\n--user-config-file=VAL      Load the specified user configuration file(s); this option may be repeated to load multiple files\n--auto-repair               Automatically repair a corrupted project file specified by the --project-file option", 
            "title": "Commandline Options"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#stop-burp-proxy", 
            "text": "echo SHUTDOWN   /dev/tcp/127.0.0.1/4444\nor\necho SHUTDOWN | netcat 127.0.0.1 4444\nor\necho SHUTDOWN | ncat 127.0.0.1 4444", 
            "title": "Stop Burp Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/", 
            "text": "Headless Burp Scanner\n\n\nProvides an extension to Burp that allows you to run Burp Suite's spider and scanner tools in headless mode via command-line.\n\n\nHowever, it can do more!\nIt can produce a JUnit like report which in turn could instruct the CI server (maybe \nJenkins\n) to mark the build as \"failed\" whenever any vulnerabilities are found. You can also mark some issues as false positives and those will not be reported anymore on the next scan reports. \n\n\nUsage\n\n\nOn *nix:\n\n\njava -Xmx1G -Djava.awt.headless\n=\ntrue\n \n\\\n\n-classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.7.31.jar burp.StartBurp \n\\\n\n--project-file\n=\nproject.burp -c config.xml\n\n\n\n\nOn Cygwin:\n\n\njava -Xmx1G -Djava.awt.headless\n=\ntrue\n \n\\\n\n-classpath \nheadless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.7.31.jar\n burp.StartBurp \n\\\n\n--project-file\n=\nproject.burp -c config.xml\n\n\n\n\nConfiguration\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nconfig\n \nxmlns=\nhttp://nets.eu/burp/config\n\n    \nreportType\nHTML\n/reportType\n \n!-- JUNIT|HTML|XML --\n\n    \ntargetSitemap\n![CDATA[http://localhost:5432]]\n/targetSitemap\n\n    \nscope\n\n        \nurl\n![CDATA[http://localhost:5432/]]\n/url\n\n        \nexclusions\n\n            \nexclusion\n![CDATA[localhost:5432/#/logout]]\n/exclusion\n\n        \n/exclusions\n\n    \n/scope\n\n    \nfalse-positives\n\n        \nissue\n\n            \ntype\n5244416\n/type\n\n            \npath\n.*\n/path\n\n        \n/issue\n\n        \nissue\n\n            \ntype\n5247488\n/type\n\n            \npath\n.*bower_components.*\n/path\n\n        \n/issue\n\n    \n/false-positives\n\n\n/config\n\n\n\n\n\nFor an example configuration file, see \nconfig.xml\n and \nheadless-burp-scanner-config.xsd\n for the xsd\n\n\nCommand-line options\n\n\n--project-file=VAL          Open the specified project file; this will be created as a new project if the file does not exist (mandatory)\n-c (--config) \nfile\n        Configuration file (mandatory)\n-p (--prompt)               Indicates whether to prompt the user to confirm the shutdown (useful for debugging)\n-v (--verbose)              Enable verbose output\n\n--diagnostics               Print diagnostic information\n--use-defaults              Start with default settings\n--collaborator-server       Run in Collaborator server mode\n--collaborator-config=VAL   Specify Collaborator server configuration file; defaults to collaborator.config\n--config-file=VAL           Load the specified project configuration file(s); this option may be repeated to load multiple files\n--user-config-file=VAL      Load the specified user configuration file(s); this option may be repeated to load multiple files\n--auto-repair               Automatically repair a corrupted project file specified by the --project-file option\n\n\n\n\nScenarios\n\n\nThe extension has been designed to be versatile and support several scenarios\n\n\nScenario A: Scan URL(s) for security issues using Burp\n\n\n\n\nCreate a file - config.xml like below and add the URL(s) to be scanned to the scope.\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nconfig\n \nxmlns=\nhttp://nets.eu/burp/config\n\n    \nreportType\nHTML\n/reportType\n\n    \ntargetSitemap\n![CDATA[http://localhost:5432]]\n/targetSitemap\n\n    \nscope\n\n        \nurl\n![CDATA[http://localhost:5432/auth]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users/1]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users?search=asd]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/bar/foo]]\n/url\n\n    \n/scope\n\n\n/config\n\n\n\n\n\n\n\nRun as shown in the \nusage\n section\n\n\n\n\nScenario B: Scan URL(s) for security issues using Burp but exclude scanning of certain paths\n\n\n\n\nAdd an \nexclusions\n block to the configuration file.\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nconfig\n \nxmlns=\nhttp://nets.eu/burp/config\n\n    \nreportType\nHTML\n/reportType\n\n    \ntargetSitemap\n![CDATA[http://localhost:5432]]\n/targetSitemap\n\n    \nscope\n\n        \nurl\n![CDATA[http://localhost:5432/auth]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users/1]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users?search=asd]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/bar/foo]]\n/url\n\n        \nexclusions\n\n            \nexclusion\n![CDATA[localhost:5432/#/logout]]\n/exclusion\n\n            \nexclusion\n![CDATA[localhost:5432/#/users/delete]]\n/exclusion\n\n            \nexclusion\n![CDATA[localhost:5432/#/creepy/crawly]]\n/exclusion\n\n        \n/exclusions\n\n    \n/scope\n\n\n/config\n\n\n\n\n\n\n\nRun as shown in the \nusage\n section\n\n\n\n\nScenario C: Scan URL(s) for security issues using Burp but suppress false positives from the scan report\n\n\n\n\nAdd a \nfalse-positives\n block with the issue type and path \n(these can be retrieved from a burp scan report)\n to the configuration file.\nYou can find more details about \nIssue Definitions here\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nconfig\n \nxmlns=\nhttp://nets.eu/burp/config\n\n    \nreportType\nHTML\n/reportType\n\n    \ntargetSitemap\n![CDATA[http://localhost:5432]]\n/targetSitemap\n\n    \nscope\n\n        \nurl\n![CDATA[http://localhost:5432/auth]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users/1]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/users?search=asd]]\n/url\n\n        \nurl\n![CDATA[http://localhost:5432/bar/foo]]\n/url\n\n        \nexclusions\n\n            \nexclusion\n![CDATA[localhost:5432/#/logout]]\n/exclusion\n\n            \nexclusion\n![CDATA[localhost:5432/#/users/delete]]\n/exclusion\n\n            \nexclusion\n![CDATA[localhost:5432/#/creepy/crawly]]\n/exclusion\n\n        \n/exclusions\n\n        \nfalse-positives\n\n            \nissue\n\n                \ntype\n5244416\n/type\n\n                \npath\n.*\n/path\n\n            \n/issue\n\n            \nissue\n\n                \ntype\n5247488\n/type\n\n                \npath\n.*bower_components.*\n/path\n\n            \n/issue\n\n        \n/false-positives\n\n    \n/scope\n\n\n/config\n\n\n\n\n\n\n\nRun as shown in the \nusage\n section\n\n\n\n\nScenario D: Scan more than just GET requests - Use request.response data derived from running functional/integration tests as input to the scan\n\n\nSometimes, just spidering a target scope and and performing on a scope of URLs doesnt give much value. \nFor e.g. when scanning a web application where routing is handled using JavaScript. \nBurp scans can discover more if it can scan more \"real-world\" requests and responses. \nThis way, it can attack the target URLs more effectively and potentially discover more than a \nshot in the dark\n spider + scan approach. \n\n\nTo handle such cases, it would be best to let the burp proxy intercept some real traffic to the target and build up a sitemap for itself. \nThe \nHeadless Burp Proxy\n extension provides an simple way to achieve this.\n\n\n\n\nFollow instructions at \nHeadless Burp Proxy\n and start up burp proxy and remember to set the \n--project-file\n option. This is where the \"seed\" data for scanning is going to be stored.\n\n\nConfigure your functional/integration tests to go through the burp proxy (defaults to \n4646\n if you use the extension) by setting HTTP_PROXY or similar.\n\n\nRun the functional/integration tests against the target.\n\n\nCreate a config.xml with the targetSitemap  (typically, the base URL of the application), scope, exclusions, false-positives etc.\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nconfig\n \nxmlns=\nhttp://nets.eu/burp/config\n\n    \nreportType\nHTML\n/reportType\n\n    \ntargetSitemap\n![CDATA[http://localhost:5432]]\n/targetSitemap\n\n    \nscope\n\n        \nurl\n![CDATA[http://localhost:5432]]\n/url\n\n        \nexclusions\n\n            \nexclusion\n![CDATA[localhost:5432/#/logout]]\n/exclusion\n\n        \n/exclusions\n\n        \nfalse-positives\n\n            \nissue\n\n                \ntype\n5244416\n/type\n\n                \npath\n.*\n/path\n\n            \n/issue\n\n        \n/false-positives\n\n    \n/scope\n\n\n/config\n\n\n\n\n\n\n\nRun as shown in the \nusage\n section and remember to set the \n--project-file\n option\n\n\n\n\ntl;dr;\n\n\nThe headless burp scanner plugin can do these\n\n\n\n\nRun burp scan in headless or GUI mode\n\n\nSpecify target sitemap and add URL(d) to Burp's target scope\n\n\nUse the \"seed\" request/response data generated by any integration/functional tests you might have\n\n\nMark issues as false positives, these will not be reported in the scan report anymore.\n\n\nSpider the target scope.\n\n\nActively scan the target scope.\n\n\nGenerate a scan report in JUnit/HTML/XML format.\n\n\nShut down Burp", 
            "title": "Headless Burp Scanner"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#headless-burp-scanner", 
            "text": "Provides an extension to Burp that allows you to run Burp Suite's spider and scanner tools in headless mode via command-line.  However, it can do more!\nIt can produce a JUnit like report which in turn could instruct the CI server (maybe  Jenkins ) to mark the build as \"failed\" whenever any vulnerabilities are found. You can also mark some issues as false positives and those will not be reported anymore on the next scan reports.", 
            "title": "Headless Burp Scanner"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#usage", 
            "text": "On *nix:  java -Xmx1G -Djava.awt.headless = true   \\ \n-classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.7.31.jar burp.StartBurp  \\ \n--project-file = project.burp -c config.xml  On Cygwin:  java -Xmx1G -Djava.awt.headless = true   \\ \n-classpath  headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.7.31.jar  burp.StartBurp  \\ \n--project-file = project.burp -c config.xml", 
            "title": "Usage"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#configuration", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  config   xmlns= http://nets.eu/burp/config \n     reportType HTML /reportType   !-- JUNIT|HTML|XML -- \n     targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap \n     scope \n         url ![CDATA[http://localhost:5432/]] /url \n         exclusions \n             exclusion ![CDATA[localhost:5432/#/logout]] /exclusion \n         /exclusions \n     /scope \n     false-positives \n         issue \n             type 5244416 /type \n             path .* /path \n         /issue \n         issue \n             type 5247488 /type \n             path .*bower_components.* /path \n         /issue \n     /false-positives  /config   For an example configuration file, see  config.xml  and  headless-burp-scanner-config.xsd  for the xsd", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#command-line-options", 
            "text": "--project-file=VAL          Open the specified project file; this will be created as a new project if the file does not exist (mandatory)\n-c (--config)  file         Configuration file (mandatory)\n-p (--prompt)               Indicates whether to prompt the user to confirm the shutdown (useful for debugging)\n-v (--verbose)              Enable verbose output\n\n--diagnostics               Print diagnostic information\n--use-defaults              Start with default settings\n--collaborator-server       Run in Collaborator server mode\n--collaborator-config=VAL   Specify Collaborator server configuration file; defaults to collaborator.config\n--config-file=VAL           Load the specified project configuration file(s); this option may be repeated to load multiple files\n--user-config-file=VAL      Load the specified user configuration file(s); this option may be repeated to load multiple files\n--auto-repair               Automatically repair a corrupted project file specified by the --project-file option", 
            "title": "Command-line options"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#scenarios", 
            "text": "The extension has been designed to be versatile and support several scenarios", 
            "title": "Scenarios"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#scenario-a-scan-urls-for-security-issues-using-burp", 
            "text": "Create a file - config.xml like below and add the URL(s) to be scanned to the scope.   ?xml version= 1.0  encoding= UTF-8 ?  config   xmlns= http://nets.eu/burp/config \n     reportType HTML /reportType \n     targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap \n     scope \n         url ![CDATA[http://localhost:5432/auth]] /url \n         url ![CDATA[http://localhost:5432/users]] /url \n         url ![CDATA[http://localhost:5432/users/1]] /url \n         url ![CDATA[http://localhost:5432/users?search=asd]] /url \n         url ![CDATA[http://localhost:5432/bar/foo]] /url \n     /scope  /config    Run as shown in the  usage  section", 
            "title": "Scenario A: Scan URL(s) for security issues using Burp"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#scenario-b-scan-urls-for-security-issues-using-burp-but-exclude-scanning-of-certain-paths", 
            "text": "Add an  exclusions  block to the configuration file.   ?xml version= 1.0  encoding= UTF-8 ?  config   xmlns= http://nets.eu/burp/config \n     reportType HTML /reportType \n     targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap \n     scope \n         url ![CDATA[http://localhost:5432/auth]] /url \n         url ![CDATA[http://localhost:5432/users]] /url \n         url ![CDATA[http://localhost:5432/users/1]] /url \n         url ![CDATA[http://localhost:5432/users?search=asd]] /url \n         url ![CDATA[http://localhost:5432/bar/foo]] /url \n         exclusions \n             exclusion ![CDATA[localhost:5432/#/logout]] /exclusion \n             exclusion ![CDATA[localhost:5432/#/users/delete]] /exclusion \n             exclusion ![CDATA[localhost:5432/#/creepy/crawly]] /exclusion \n         /exclusions \n     /scope  /config    Run as shown in the  usage  section", 
            "title": "Scenario B: Scan URL(s) for security issues using Burp but exclude scanning of certain paths"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#scenario-c-scan-urls-for-security-issues-using-burp-but-suppress-false-positives-from-the-scan-report", 
            "text": "Add a  false-positives  block with the issue type and path  (these can be retrieved from a burp scan report)  to the configuration file.\nYou can find more details about  Issue Definitions here   ?xml version= 1.0  encoding= UTF-8 ?  config   xmlns= http://nets.eu/burp/config \n     reportType HTML /reportType \n     targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap \n     scope \n         url ![CDATA[http://localhost:5432/auth]] /url \n         url ![CDATA[http://localhost:5432/users]] /url \n         url ![CDATA[http://localhost:5432/users/1]] /url \n         url ![CDATA[http://localhost:5432/users?search=asd]] /url \n         url ![CDATA[http://localhost:5432/bar/foo]] /url \n         exclusions \n             exclusion ![CDATA[localhost:5432/#/logout]] /exclusion \n             exclusion ![CDATA[localhost:5432/#/users/delete]] /exclusion \n             exclusion ![CDATA[localhost:5432/#/creepy/crawly]] /exclusion \n         /exclusions \n         false-positives \n             issue \n                 type 5244416 /type \n                 path .* /path \n             /issue \n             issue \n                 type 5247488 /type \n                 path .*bower_components.* /path \n             /issue \n         /false-positives \n     /scope  /config    Run as shown in the  usage  section", 
            "title": "Scenario C: Scan URL(s) for security issues using Burp but suppress false positives from the scan report"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#scenario-d-scan-more-than-just-get-requests-use-requestresponse-data-derived-from-running-functionalintegration-tests-as-input-to-the-scan", 
            "text": "Sometimes, just spidering a target scope and and performing on a scope of URLs doesnt give much value. \nFor e.g. when scanning a web application where routing is handled using JavaScript. \nBurp scans can discover more if it can scan more \"real-world\" requests and responses. \nThis way, it can attack the target URLs more effectively and potentially discover more than a  shot in the dark  spider + scan approach.   To handle such cases, it would be best to let the burp proxy intercept some real traffic to the target and build up a sitemap for itself. \nThe  Headless Burp Proxy  extension provides an simple way to achieve this.   Follow instructions at  Headless Burp Proxy  and start up burp proxy and remember to set the  --project-file  option. This is where the \"seed\" data for scanning is going to be stored.  Configure your functional/integration tests to go through the burp proxy (defaults to  4646  if you use the extension) by setting HTTP_PROXY or similar.  Run the functional/integration tests against the target.  Create a config.xml with the targetSitemap  (typically, the base URL of the application), scope, exclusions, false-positives etc.   ?xml version= 1.0  encoding= UTF-8 ?  config   xmlns= http://nets.eu/burp/config \n     reportType HTML /reportType \n     targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap \n     scope \n         url ![CDATA[http://localhost:5432]] /url \n         exclusions \n             exclusion ![CDATA[localhost:5432/#/logout]] /exclusion \n         /exclusions \n         false-positives \n             issue \n                 type 5244416 /type \n                 path .* /path \n             /issue \n         /false-positives \n     /scope  /config    Run as shown in the  usage  section and remember to set the  --project-file  option", 
            "title": "Scenario D: Scan more than just GET requests - Use request.response data derived from running functional/integration tests as input to the scan"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#tldr", 
            "text": "The headless burp scanner plugin can do these   Run burp scan in headless or GUI mode  Specify target sitemap and add URL(d) to Burp's target scope  Use the \"seed\" request/response data generated by any integration/functional tests you might have  Mark issues as false positives, these will not be reported in the scan report anymore.  Spider the target scope.  Actively scan the target scope.  Generate a scan report in JUnit/HTML/XML format.  Shut down Burp", 
            "title": "tl;dr;"
        }, 
        {
            "location": "/user-guide/maven-plugin/usage/", 
            "text": "Burp Maven Plugin\n\n\nMaven plugin that allows you to run Burp Suite's Proxy and Scanner tools in headless mode.\n\n\nThe plugin is essentially a wrapper around the \nHeadless Burp Proxy\n and \nHeadless Burp Scanner\n extensions. It offers easy way to integrate security testing using \nBurp Suite\n into the project build lifecycle.\n\n\nFull example\n\n\nbuild\n\n    ...\n    \nplugins\n\n        ...\n        \nplugin\n\n            \ngroupId\neu.nets.burp\n/groupId\n\n            \nartifactId\nburp-maven-plugin\n/artifactId\n\n            \nversion\nmaster-SNAPSHOT\n/version\n\n            \nconfiguration\n\n                \nburpSuite\nburp/burpsuite_pro_v1.7.31.jar\n/burpSuite\n\n                \nburpProjectFile\ntarget/headless-burp-project.burp\n/burpProjectFile\n\n                \nburpConfig\nburp/config.xml\n/burpConfig\n\n                \nheadless\ntrue\n/headless\n\n                \npromptOnExit\nfalse\n/promptOnExit\n\n                \nverbose\ntrue\n/verbose\n\n                \nskip\nfalse\n/skip\n\n            \n/configuration\n\n            \nexecutions\n\n                \nexecution\n\n                    \nid\nstart-burp-proxy\n/id\n\n                    \nphase\npre-integration-test\n/phase\n\n                    \ngoals\n\n                        \ngoal\nstart-proxy\n/goal\n\n                    \n/goals\n\n                \n/execution\n\n                \nexecution\n\n                    \nid\nstop-burp-proxy\n/id\n\n                    \nphase\npost-integration-test\n/phase\n\n                    \ngoals\n\n                        \ngoal\nstop-proxy\n/goal\n\n                    \n/goals\n\n                \n/execution\n\n                \nexecution\n\n                    \nid\nstart-burp-scan\n/id\n\n                    \nphase\nverify\n/phase\n\n                    \ngoals\n\n                        \ngoal\nstart-scan\n/goal\n\n                    \n/goals\n\n                \n/execution\n\n            \n/executions\n\n        \n/plugin\n\n        ...\n    \n/plugins\n\n    ...\n\n/build", 
            "title": "Usage"
        }, 
        {
            "location": "/user-guide/maven-plugin/usage/#burp-maven-plugin", 
            "text": "Maven plugin that allows you to run Burp Suite's Proxy and Scanner tools in headless mode.  The plugin is essentially a wrapper around the  Headless Burp Proxy  and  Headless Burp Scanner  extensions. It offers easy way to integrate security testing using  Burp Suite  into the project build lifecycle.", 
            "title": "Burp Maven Plugin"
        }, 
        {
            "location": "/user-guide/maven-plugin/usage/#full-example", 
            "text": "build \n    ...\n     plugins \n        ...\n         plugin \n             groupId eu.nets.burp /groupId \n             artifactId burp-maven-plugin /artifactId \n             version master-SNAPSHOT /version \n             configuration \n                 burpSuite burp/burpsuite_pro_v1.7.31.jar /burpSuite \n                 burpProjectFile target/headless-burp-project.burp /burpProjectFile \n                 burpConfig burp/config.xml /burpConfig \n                 headless true /headless \n                 promptOnExit false /promptOnExit \n                 verbose true /verbose \n                 skip false /skip \n             /configuration \n             executions \n                 execution \n                     id start-burp-proxy /id \n                     phase pre-integration-test /phase \n                     goals \n                         goal start-proxy /goal \n                     /goals \n                 /execution \n                 execution \n                     id stop-burp-proxy /id \n                     phase post-integration-test /phase \n                     goals \n                         goal stop-proxy /goal \n                     /goals \n                 /execution \n                 execution \n                     id start-burp-scan /id \n                     phase verify /phase \n                     goals \n                         goal start-scan /goal \n                     /goals \n                 /execution \n             /executions \n         /plugin \n        ...\n     /plugins \n    ... /build", 
            "title": "Full example"
        }, 
        {
            "location": "/known-issues/", 
            "text": "Known Issues \n Limitations\n\n\nLimitations\n\n\n\n\nManual configuration is still required\n\n\nWhat to proxy - scope\n\n\nAdding false positives\n\n\nLogin macro(s)?\n\n\n\n\n\n\nTakes quite some time to run the scan\n\n\nBelongs in the nightly build\n\n\n\n\n\n\nNot a silver bullet..\n\n\nThe point of using a tool and automation, is to scale and enforce policy. You also have to embed security in your development work, educate yourself so that you can plug those security holes before they emerge. \n\n\n\n\n\n\n\n\nKnown Issues\n\n\nI am sure there are many \n \n\n\nPlease feel free to report any issues you face when using the extensions and the maven plugin by creating an issues on the github repo, \nhere\n.\n\n\nTODO:\n\n\n\n\nPublish the maven plugin to maven central and jcenter\n\n\nPublish the extensions to BApp store\n\n\nAdd \nmuch\n more documentation\n\n\n...", 
            "title": "Known Issues & Limitations"
        }, 
        {
            "location": "/known-issues/#known-issues-limitations", 
            "text": "", 
            "title": "Known Issues &amp; Limitations"
        }, 
        {
            "location": "/known-issues/#limitations", 
            "text": "Manual configuration is still required  What to proxy - scope  Adding false positives  Login macro(s)?    Takes quite some time to run the scan  Belongs in the nightly build    Not a silver bullet..  The point of using a tool and automation, is to scale and enforce policy. You also have to embed security in your development work, educate yourself so that you can plug those security holes before they emerge.", 
            "title": "Limitations"
        }, 
        {
            "location": "/known-issues/#known-issues", 
            "text": "I am sure there are many     Please feel free to report any issues you face when using the extensions and the maven plugin by creating an issues on the github repo,  here .", 
            "title": "Known Issues"
        }, 
        {
            "location": "/known-issues/#todo", 
            "text": "Publish the maven plugin to maven central and jcenter  Publish the extensions to BApp store  Add  much  more documentation  ...", 
            "title": "TODO:"
        }, 
        {
            "location": "/release-notes/release-notes-1.0/", 
            "text": "Release Notes 1.0\n\n\nTODO: Yet to release 1.0", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/release-notes-1.0/#release-notes-10", 
            "text": "TODO: Yet to release 1.0", 
            "title": "Release Notes 1.0"
        }
    ]
}