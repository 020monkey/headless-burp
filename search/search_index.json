{
    "docs": [
        {
            "location": "/", 
            "text": "Headless Burp\n\n\nProvides a suite of extensions and a maven plugin to automate security tests using \nBurp Suite\n.\n\n\nBuilding security into your continuous delivery pipeline - Anand Sudhir, Rita Nordtug\n from \nJavaZone 2015\n\n\n\n\nQuick Start\n\n\nFor detailed instructions see the \ngetting started guide\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#headless-burp", 
            "text": "Provides a suite of extensions and a maven plugin to automate security tests using  Burp Suite .", 
            "title": "Headless Burp"
        }, 
        {
            "location": "/#building-security-into-your-continuous-delivery-pipeline-anand-sudhir-rita-nordtug-from-javazone-2015", 
            "text": "", 
            "title": "Building security into your continuous delivery pipeline - Anand Sudhir, Rita Nordtug from JavaZone 2015"
        }, 
        {
            "location": "/#quick-start", 
            "text": "For detailed instructions see the  getting started guide .", 
            "title": "Quick Start"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Installation\n\n\nInstalling Burp on windows\n\n\nBefore installing \nBurp Suite\n, make sure you have Java 8 up and running, You can verify if you're already good to go with the following commands: \n\n\njava -version\n\n\n\n\n\n\nheadless-burp version requirements\n\n\nheadless-burp requires java \n= 1.8\n\n\n\n\nDownload Burp Suite from \nhere\n.\n\n\nFollow instructions on \nhttps://portswigger.net/burp/help/suite_gettingstarted.html\n\n\nInstalling Burp on a headless machine\n\n\njava -jar -Xmx1024m /path/to/burp.jar\n\n\n\n\nTODO: Add installation steps and screenshots\n\n\nBuilding Documentation\n\n\npip install mkdocs\npip install mkdocs-material\npip install pymdown-extensions\n\nmkdocs serve\nmkdocs build --clean\n\nmkdocs gh-deploy --clean", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#installing-burp-on-windows", 
            "text": "Before installing  Burp Suite , make sure you have Java 8 up and running, You can verify if you're already good to go with the following commands:   java -version   headless-burp version requirements  headless-burp requires java  = 1.8   Download Burp Suite from  here .  Follow instructions on  https://portswigger.net/burp/help/suite_gettingstarted.html", 
            "title": "Installing Burp on windows"
        }, 
        {
            "location": "/getting-started/#installing-burp-on-a-headless-machine", 
            "text": "java -jar -Xmx1024m /path/to/burp.jar  TODO: Add installation steps and screenshots", 
            "title": "Installing Burp on a headless machine"
        }, 
        {
            "location": "/getting-started/#building-documentation", 
            "text": "pip install mkdocs\npip install mkdocs-material\npip install pymdown-extensions\n\nmkdocs serve\nmkdocs build --clean\n\nmkdocs gh-deploy --clean", 
            "title": "Building Documentation"
        }, 
        {
            "location": "/background/background/", 
            "text": "Background\n\n\nDevOps and continuous delivery are changing the way software is delivered, enabling businesses to deploy software far more frequently than in the past, thereby improving time-to-market, consistency and application stability. \n\n\nAutomated unit, integration and acceptance tests, static code analysis ensure essential quality controls but they are focused on the functional aspects of the software, not on security.\n\n\nCurrent Scenario\n\n\nOur current scenario at Nets is that we do all our development in an agile fashion, but as we have very strict requirements to making our applications secure,  a pen-test must be performed before releasing. \n\n\nThis happens in the very end, making any findings risky to fix and have severe risk for delaying our release. \n\n\nWe also have a limited pool of security experts, and may in some cases have a long wait ahead of us before pen-test can be performed. \n\n\nAnd we are the lucky ones. We have security experts testing our code. We all know that this is not the case for a lot of web-applications out there. Some have to hire expensive consultants and some doesn\u2019t do any security testing at all. \n\n\ntl;dr;", 
            "title": "Background"
        }, 
        {
            "location": "/background/background/#background", 
            "text": "DevOps and continuous delivery are changing the way software is delivered, enabling businesses to deploy software far more frequently than in the past, thereby improving time-to-market, consistency and application stability.   Automated unit, integration and acceptance tests, static code analysis ensure essential quality controls but they are focused on the functional aspects of the software, not on security.", 
            "title": "Background"
        }, 
        {
            "location": "/background/background/#current-scenario", 
            "text": "Our current scenario at Nets is that we do all our development in an agile fashion, but as we have very strict requirements to making our applications secure,  a pen-test must be performed before releasing.   This happens in the very end, making any findings risky to fix and have severe risk for delaying our release.   We also have a limited pool of security experts, and may in some cases have a long wait ahead of us before pen-test can be performed.   And we are the lucky ones. We have security experts testing our code. We all know that this is not the case for a lot of web-applications out there. Some have to hire expensive consultants and some doesn\u2019t do any security testing at all.", 
            "title": "Current Scenario"
        }, 
        {
            "location": "/background/background/#tldr", 
            "text": "", 
            "title": "tl;dr;"
        }, 
        {
            "location": "/background/our-goal/", 
            "text": "Our Goal\n\n\nWe wanted the  security-testing to become an integrated part of our development. And by doing that move it earlier in the development cycle. \n\n\nTo make sure it would be a natural part of the development we wanted to move into the delivery pipeline as an automated job. \n\n\nOur security experts recommended \nBurp\n as the best tool available for the job and this is the reason why we selected this over \nOWASP ZAP\n.", 
            "title": "Our Goal"
        }, 
        {
            "location": "/background/our-goal/#our-goal", 
            "text": "We wanted the  security-testing to become an integrated part of our development. And by doing that move it earlier in the development cycle.   To make sure it would be a natural part of the development we wanted to move into the delivery pipeline as an automated job.   Our security experts recommended  Burp  as the best tool available for the job and this is the reason why we selected this over  OWASP ZAP .", 
            "title": "Our Goal"
        }, 
        {
            "location": "/background/burp/", 
            "text": "Burp\n\n\nBurp is an automated tool for finding those security holes that exists in your application. It is a tool that contains a lot of features for any type of security testing. We are not using the whole suite of components that Burp offers but are using those features that lend themselves to automation. \n\n\nFirst the proxy is used to map the application. In a manual security test you would use the proxy to intercept all your traffic while going through your applications functionality. Getting burp to build up a site map of all your requests and parameters. \n\n\nThe spider can then be used as a tool to crawl through the rest of the application you missed in the proxying. A spider will take a URL and try to access all resources on that URL recursively until it has covered everything. \n\n\nThis site map built by the proxy and spider is then what the scanner uses to test your application for vulnerabilities. It performs this test by automaticlly attack your site using a number of known hacking techniques, and reports back to you any security issues it finds. \n\n\nAnd these are the three tools  we wanted to automate in our PoC.", 
            "title": "Burp"
        }, 
        {
            "location": "/background/burp/#burp", 
            "text": "Burp is an automated tool for finding those security holes that exists in your application. It is a tool that contains a lot of features for any type of security testing. We are not using the whole suite of components that Burp offers but are using those features that lend themselves to automation.   First the proxy is used to map the application. In a manual security test you would use the proxy to intercept all your traffic while going through your applications functionality. Getting burp to build up a site map of all your requests and parameters.   The spider can then be used as a tool to crawl through the rest of the application you missed in the proxying. A spider will take a URL and try to access all resources on that URL recursively until it has covered everything.   This site map built by the proxy and spider is then what the scanner uses to test your application for vulnerabilities. It performs this test by automaticlly attack your site using a number of known hacking techniques, and reports back to you any security issues it finds.   And these are the three tools  we wanted to automate in our PoC.", 
            "title": "Burp"
        }, 
        {
            "location": "/background/automation/", 
            "text": "Burp and Automation\n\n\nBurp does not lend itself easily to automation. There is not built in way to run Burp headless, i.e on a server without a graphical user interface. This is a requirement if you want to automate the job. Burp documentation states that this might come in future versions. \n\n\nHowever, you can build an extension to burp and get burp to load it. Several programming languages are supported, including Java, Python and Ruby. \n\n\nAnd there are several developers who have already done this and made their extensions available through \nBApp Store\n. That is the Burp community for sharing these extensions. \n\n\nOne of the most popular extensions for running Burp headless is \nCarbonator\n. By giving it a target scope, it spiders the scope and performs a scan and a HTML report is generated at the end.  \n\n\nHowever, we wanted more!\n\n\nWe wanted JUnit like output in Jenkins and a failed build whenever any vulnerabilities were found. And we also wanted the possibility to flag false positives. That is after a potential security hole has been found and reported, you investigate it in your code and find that no way this can happen, you want to configure this so that it will not be reported on the next run. \n\n\nAnd just performing a scan on a target doesn\u2019t really give that much in our javascript web application world today by reasons I\u2019ll get back to later. So we also had to be able to automatically proxy the application to build that sitemap. \n\n\nSo we first decided to port \nCarbonator\n to Java (as we did\u2019t know python very well), and built our own extension.", 
            "title": "Automation"
        }, 
        {
            "location": "/background/automation/#burp-and-automation", 
            "text": "Burp does not lend itself easily to automation. There is not built in way to run Burp headless, i.e on a server without a graphical user interface. This is a requirement if you want to automate the job. Burp documentation states that this might come in future versions.   However, you can build an extension to burp and get burp to load it. Several programming languages are supported, including Java, Python and Ruby.   And there are several developers who have already done this and made their extensions available through  BApp Store . That is the Burp community for sharing these extensions.   One of the most popular extensions for running Burp headless is  Carbonator . By giving it a target scope, it spiders the scope and performs a scan and a HTML report is generated at the end.    However, we wanted more!  We wanted JUnit like output in Jenkins and a failed build whenever any vulnerabilities were found. And we also wanted the possibility to flag false positives. That is after a potential security hole has been found and reported, you investigate it in your code and find that no way this can happen, you want to configure this so that it will not be reported on the next run.   And just performing a scan on a target doesn\u2019t really give that much in our javascript web application world today by reasons I\u2019ll get back to later. So we also had to be able to automatically proxy the application to build that sitemap.   So we first decided to port  Carbonator  to Java (as we did\u2019t know python very well), and built our own extension.", 
            "title": "Burp and Automation"
        }, 
        {
            "location": "/user-guide/maven-plugin/", 
            "text": "Maven Plugin\n\n\nMaven plugin that allows you to run the Burp Proxy and Scanner tools in headless mode.\n\n\nScanner\n\n\n...\n\nbuild\n\n    \nplugins\n\n        \nplugin\n\n            \ngroupId\neu.nets.burp\n/groupId\n\n            \nartifactId\nburp-maven-plugin\n/artifactId\n\n            \nversion\nmaster-SNAPSHOT\n/version\n\n            \nconfiguration\n\n                \nburpSuite\nburp/burpsuite_pro_v1.6.26.jar\n/burpSuite\n\n                \nburpConfig\nburp/config.xml\n/burpConfig\n\n                \nheadless\ntrue\n/headless\n\n                \nburpState\ntarget/headless-burp-proxy.state\n/burpState\n\n                \npromptOnExit\nfalse\n/promptOnExit\n\n                \nverbose\ntrue\n/verbose\n\n                \nskip\nfalse\n/skip\n\n            \n/configuration\n\n        \n/plugin\n\n    \n/plugins\n\n\n/build\n\n...\n\n\n\n\nTODO\n\n\nProxy\n\n\n...\n\nbuild\n\n    \nplugins\n\n        \nplugin\n\n            \ngroupId\neu.nets.burp\n/groupId\n\n            \nartifactId\nburp-maven-plugin\n/artifactId\n\n            \nversion\nmaster-SNAPSHOT\n/version\n\n            \nconfiguration\n\n                \nburpSuite\nburp/burpsuite_pro_v1.6.26.jar\n/burpSuite\n\n                \nburpConfig\nburp/config.xml\n/burpConfig\n\n                \nheadless\ntrue\n/headless\n\n                \nburpState\ntarget/headless-burp-proxy.state\n/burpState\n\n                \npromptOnExit\nfalse\n/promptOnExit\n\n                \nverbose\ntrue\n/verbose\n\n                \nskip\nfalse\n/skip\n\n            \n/configuration\n\n            \nexecutions\n\n                \nexecution\n\n                    \nid\nstart-burp-proxy\n/id\n\n                    \nphase\npre-integration-test\n/phase\n\n                    \ngoals\n\n                        \ngoal\nstart-proxy\n/goal\n\n                    \n/goals\n\n                    \nconfiguration\n\n                        \nburpState\nburp/initial-burp-state\n/burpState\n\n                    \n/configuration\n\n                \n/execution\n\n                \nexecution\n\n                    \nid\nstop-burp-proxy\n/id\n\n                    \nphase\npost-integration-test\n/phase\n\n                    \ngoals\n\n                        \ngoal\nstop-proxy\n/goal\n\n                    \n/goals\n\n                \n/execution\n\n            \n/executions\n\n        \n/plugin\n\n    \n/plugins\n\n\n/build\n\n...", 
            "title": "Maven Plugin"
        }, 
        {
            "location": "/user-guide/maven-plugin/#maven-plugin", 
            "text": "Maven plugin that allows you to run the Burp Proxy and Scanner tools in headless mode.", 
            "title": "Maven Plugin"
        }, 
        {
            "location": "/user-guide/maven-plugin/#scanner", 
            "text": "... build \n     plugins \n         plugin \n             groupId eu.nets.burp /groupId \n             artifactId burp-maven-plugin /artifactId \n             version master-SNAPSHOT /version \n             configuration \n                 burpSuite burp/burpsuite_pro_v1.6.26.jar /burpSuite \n                 burpConfig burp/config.xml /burpConfig \n                 headless true /headless \n                 burpState target/headless-burp-proxy.state /burpState \n                 promptOnExit false /promptOnExit \n                 verbose true /verbose \n                 skip false /skip \n             /configuration \n         /plugin \n     /plugins  /build \n...  TODO", 
            "title": "Scanner"
        }, 
        {
            "location": "/user-guide/maven-plugin/#proxy", 
            "text": "... build \n     plugins \n         plugin \n             groupId eu.nets.burp /groupId \n             artifactId burp-maven-plugin /artifactId \n             version master-SNAPSHOT /version \n             configuration \n                 burpSuite burp/burpsuite_pro_v1.6.26.jar /burpSuite \n                 burpConfig burp/config.xml /burpConfig \n                 headless true /headless \n                 burpState target/headless-burp-proxy.state /burpState \n                 promptOnExit false /promptOnExit \n                 verbose true /verbose \n                 skip false /skip \n             /configuration \n             executions \n                 execution \n                     id start-burp-proxy /id \n                     phase pre-integration-test /phase \n                     goals \n                         goal start-proxy /goal \n                     /goals \n                     configuration \n                         burpState burp/initial-burp-state /burpState \n                     /configuration \n                 /execution \n                 execution \n                     id stop-burp-proxy /id \n                     phase post-integration-test /phase \n                     goals \n                         goal stop-proxy /goal \n                     /goals \n                 /execution \n             /executions \n         /plugin \n     /plugins  /build \n...", 
            "title": "Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/", 
            "text": "Headless Burp Proxy\n\n\nProvides an extension to Burp that allows you to run, stop and capture results from the Burp Proxy tool in headless mode.\n\n\nFeatures\n\n\n\n\nStarts the burp proxy on a provided port (default \n4646\n)\n\n\nRegister a shutdown listener and wait for a shutdown request (default \nSHUTDOWN\n) on port (default \n4444\n).\n\n\nOn receiving a shutdown request, saves the burp state to a file (headless-burp-proxy.state) and shutsdown Burp\n\n\n\n\nStart Burp Proxy\n\n\nOn *nix:\n\n\n/usr/java/latest8/bin/java -Xmx1G -Djava.awt.headless=true -classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.6.26.jar burp.StartBurp\n\n\n\n\n\nOn Cygwin:\n\n\njava -Xmx1G -Djava.awt.headless=true -classpath \nheadless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.6.26.jar\n burp.StartBurp\n\n\n\n\n\nCommandline Options\n\n\n-p (--prompt)        : Indicates whether to prompt the user to confirm the\n                       shutdown (useful for debugging)\n-s (--state) \nfile\n  : Burp state file\n-v (--verbose)       : Enable verbose output\n--proxyPort VAL      : Proxy port\n--shutdownPort VAL   : Shutdown port\n--shutdownKey VAL    : Shutdown key\n\n\n\n\n\nStop Burp Proxy\n\n\nTODO: provide an example using \ncurl", 
            "title": "Headless Burp Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#headless-burp-proxy", 
            "text": "Provides an extension to Burp that allows you to run, stop and capture results from the Burp Proxy tool in headless mode.", 
            "title": "Headless Burp Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#features", 
            "text": "Starts the burp proxy on a provided port (default  4646 )  Register a shutdown listener and wait for a shutdown request (default  SHUTDOWN ) on port (default  4444 ).  On receiving a shutdown request, saves the burp state to a file (headless-burp-proxy.state) and shutsdown Burp", 
            "title": "Features"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#start-burp-proxy", 
            "text": "On *nix:  /usr/java/latest8/bin/java -Xmx1G -Djava.awt.headless=true -classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.6.26.jar burp.StartBurp  On Cygwin:  java -Xmx1G -Djava.awt.headless=true -classpath  headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.6.26.jar  burp.StartBurp", 
            "title": "Start Burp Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#commandline-options", 
            "text": "-p (--prompt)        : Indicates whether to prompt the user to confirm the\n                       shutdown (useful for debugging)\n-s (--state)  file   : Burp state file\n-v (--verbose)       : Enable verbose output\n--proxyPort VAL      : Proxy port\n--shutdownPort VAL   : Shutdown port\n--shutdownKey VAL    : Shutdown key", 
            "title": "Commandline Options"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-proxy/#stop-burp-proxy", 
            "text": "TODO: provide an example using  curl", 
            "title": "Stop Burp Proxy"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/", 
            "text": "Headless Burp Scanner\n\n\nProvides an extension to Burp that allows you to run the Burp Scanner tool in headless mode.\n\n\nConfiguration\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nconfig xmlns=\nhttp://nets.eu/burp/config\n\n    \nreportType\nJUNIT\n/reportType\n\n    \ntargetSitemap\n![CDATA[http://localhost:5432]]\n/targetSitemap\n\n    \nscope\n\n        \nurl\n![CDATA[http://localhost:5432/]]\n/url\n\n        \nexclusions\n\n            \nexclusion\n![CDATA[localhost:5432/#/logout]]\n/exclusion\n\n        \n/exclusions\n\n    \n/scope\n\n    \nfalse-positives\n\n        \nissue\n\n            \ntype\n5244416\n/type\n\n            \npath\n.*\n/path\n\n        \n/issue\n\n        \nissue\n\n            \ntype\n5247488\n/type\n\n            \npath\n.*bower_components.*\n/path\n\n        \n/issue\n\n    \n/false-positives\n\n\n/config\n\n\n\n\n\n\nFor an example configuration file, see \nconfig.xml\n\n\nRun Burp Scan\n\n\nOn *nix:\n\n\n/usr/java/latest8/bin/java -Xmx1G -Djava.awt.headless=true -classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.6.26.jar burp.StartBurp -c config.xml\n\n\n\n\n\nOn Cygwin:\n\n\njava -Xmx1G -Djava.awt.headless=true -classpath \nheadless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.6.26.jar\n burp.StartBurp -c config.xml -s burp_state\n\n\n\n\n\nCommandline Options\n\n\n-c (--config) \nfile\n : Configuration file\n-p (--prompt)        : Indicates whether to prompt the user to confirm the\n                       shutdown (useful for debugging)\n-s (--state) \nfile\n  : Burp state file\n-t (--thread) VAL    : Number of scanner threads to run\n-v (--verbose)       : Enable verbose output\n\n\n\n\n\nRunning against an SSL enabled application\n\n\nGenerate java keystore\n\n\n`keytool.exe -import -keystore burp.jks -file test.nets.no.crt -alias test.nets.no`\n\n\n\n\n\nAdd commandline args\n\n\n-Djavax.net.ssl.keyStore=burp.jks -Djavax.net.ssl.keyStorePassword=headlessburp -Djavax.net.ssl.keyStoreType=jks", 
            "title": "Headless Burp Scanner"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#headless-burp-scanner", 
            "text": "Provides an extension to Burp that allows you to run the Burp Scanner tool in headless mode.", 
            "title": "Headless Burp Scanner"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#configuration", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  config xmlns= http://nets.eu/burp/config \n     reportType JUNIT /reportType \n     targetSitemap ![CDATA[http://localhost:5432]] /targetSitemap \n     scope \n         url ![CDATA[http://localhost:5432/]] /url \n         exclusions \n             exclusion ![CDATA[localhost:5432/#/logout]] /exclusion \n         /exclusions \n     /scope \n     false-positives \n         issue \n             type 5244416 /type \n             path .* /path \n         /issue \n         issue \n             type 5247488 /type \n             path .*bower_components.* /path \n         /issue \n     /false-positives  /config   For an example configuration file, see  config.xml", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#run-burp-scan", 
            "text": "On *nix:  /usr/java/latest8/bin/java -Xmx1G -Djava.awt.headless=true -classpath headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar:burpsuite_pro_v1.6.26.jar burp.StartBurp -c config.xml  On Cygwin:  java -Xmx1G -Djava.awt.headless=true -classpath  headless-burp-scanner-master-SNAPSHOT-jar-with-dependencies.jar;burpsuite_pro_v1.6.26.jar  burp.StartBurp -c config.xml -s burp_state", 
            "title": "Run Burp Scan"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#commandline-options", 
            "text": "-c (--config)  file  : Configuration file\n-p (--prompt)        : Indicates whether to prompt the user to confirm the\n                       shutdown (useful for debugging)\n-s (--state)  file   : Burp state file\n-t (--thread) VAL    : Number of scanner threads to run\n-v (--verbose)       : Enable verbose output", 
            "title": "Commandline Options"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#running-against-an-ssl-enabled-application", 
            "text": "", 
            "title": "Running against an SSL enabled application"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#generate-java-keystore", 
            "text": "`keytool.exe -import -keystore burp.jks -file test.nets.no.crt -alias test.nets.no`", 
            "title": "Generate java keystore"
        }, 
        {
            "location": "/user-guide/burp-extensions/headless-burp-scanner/#add-commandline-args", 
            "text": "-Djavax.net.ssl.keyStore=burp.jks -Djavax.net.ssl.keyStorePassword=headlessburp -Djavax.net.ssl.keyStoreType=jks", 
            "title": "Add commandline args"
        }, 
        {
            "location": "/known-issues/", 
            "text": "Known Issues \n Limitations\n\n\nLimitations\n\n\n\n\nManual configuration is still required\n\n\nWhat to proxy - scope\n\n\nGetting the state\n\n\nAdding false positives\n\n\nLogin macro\n\n\n\n\n\n\nTakes quite some time to run the scan\n\n\nWhat to proxy - scope\n\n\nBelongs in the nightly build\n\n\n\n\n\n\nNot a silver bullet..\n\n\nThe point of using a tool and automation, is to scale and enforce policy. You also have to embed security in your development work, educate yourself so that you can plug those security holes before they emerge. \n\n\n\n\n\n\n\n\nKnown Issues\n\n\n\n\nI am sure there are many \n\n\nTODO: Find and list them here", 
            "title": "Known Issues & Limitations"
        }, 
        {
            "location": "/known-issues/#known-issues-limitations", 
            "text": "", 
            "title": "Known Issues &amp; Limitations"
        }, 
        {
            "location": "/known-issues/#limitations", 
            "text": "Manual configuration is still required  What to proxy - scope  Getting the state  Adding false positives  Login macro    Takes quite some time to run the scan  What to proxy - scope  Belongs in the nightly build    Not a silver bullet..  The point of using a tool and automation, is to scale and enforce policy. You also have to embed security in your development work, educate yourself so that you can plug those security holes before they emerge.", 
            "title": "Limitations"
        }, 
        {
            "location": "/known-issues/#known-issues", 
            "text": "I am sure there are many   TODO: Find and list them here", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/release-notes-1.0/", 
            "text": "Release Notes 1.0\n\n\nTODO: Yet to release 1.0", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/release-notes-1.0/#release-notes-10", 
            "text": "TODO: Yet to release 1.0", 
            "title": "Release Notes 1.0"
        }
    ]
}