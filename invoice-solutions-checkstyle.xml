<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
  <!--
      If you set the basedir property below, then all reported file
      names will be relative to the specified directory. See
      http://checkstyle.sourceforge.net/5.x/config.html#Checker

      <property name="basedir" value="${basedir}"/>
  -->

  <!-- Checks that each Java package has a Javadoc file used for commenting. -->
  <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage       -->
  <!--<module name="JavadocPackage">
    <property name="allowLegacy" value="true"/>
  </module>-->

  <!-- Checks whether files end with a new line.                        -->
  <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="system"/>
    <property name="fileExtensions" value="*.*"/>
  </module>

  <!-- Checks that property files contain the same keys.         -->
  <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
  <module name="Translation">
    <property name="fileExtensions" value="properties"/>
  </module>

  <!--<module name="FileLength"/>-->

  <!-- Following interprets the header file as regular expressions. -->
  <!-- <module name="RegexpHeader"/>                                -->

  <module name="FileTabCharacter">
    <property name="eachLine" value="false"/>
    <property name="fileExtensions" value=""/>
  </module>

  <module name="RegexpSingleline">
    <!-- \s matches whitespace character, $ matches end of line. -->
    <property name="format" value="\s+$"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="CHECKSTYLE:OFF"/>
    <property name="onCommentFormat" value="CHECKSTYLE:ON"/>
    <property name="checkFormat" value=".*"/>
  </module>

  <module name="TreeWalker">

    <property name="cacheFile" value="${cacheFile}"/>

    <!-- required for SuppressWarningsFilter (and other Suppress* rules not used here) -->
    <!-- see http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarningsHolder -->
    <module name="SuppressWarningsHolder"/>

    <!-- Checks for Javadoc comments.                     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
    <!--<module name="JavadocMethod"/>-->
    <!--<module name="JavadocType"/>-->
    <!--<module name="JavadocVariable"/>-->
    <!--<module name="JavadocStyle"/>-->


    <!-- Checks for Naming Conventions.                  -->
    <!-- See http://checkstyle.sf.net/config_naming.html -->
    <module name="ConstantName">
      <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$|logger|log"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
    </module>
    <module name="LocalFinalVariableName">
      <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
      <property name="tokens" value="VARIABLE_DEF, PARAMETER_DEF"/>
    </module>
    <module name="LocalVariableName">
      <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
      <property name="tokens" value="PARAMETER_DEF"/>
    </module>
    <module name="MemberName">
      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
    </module>
    <module name="MethodName">
      <property name="format" value="^[a-z]([a-zA-Z0-9_]|_?[0-9]_|_[0-9]_?)*$"/>
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="^[A-Z]$"/>
    </module>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
    </module>
    <module name="ParameterName">
      <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
    </module>
    <module name="StaticVariableName"/>
    <module name="TypeName">
      <property name="format" value="^[A-Z]([a-zA-Z0-9]|_?[0-9]_|_[0-9]_?)*$"/>
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF"/>
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
    </module>

    <!-- This check allows you to specify what warnings that SuppressWarnings is not allowed to suppress. !-->
    <!-- You can also specify a list of TokenTypes that the configured warning(s) cannot be suppressed on. !-->
    <!-- See http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarnings !-->
    <module name="SuppressWarnings">
      <property name="format" value="^$|^\s+$"/>
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF,
                                           ANNOTATION_FIELD_DEF, ENUM_CONSTANT_DEF, PARAMETER_DEF,
                                           VARIABLE_DEF, METHOD_DEF, CTOR_DEF"/>
    </module>

    <!-- Checks for Headers                                -->
    <!-- See http://checkstyle.sf.net/config_header.html   -->
    <!-- <module name="Header">                            -->
    <!-- The follow property value demonstrates the ability     -->
    <!-- to have access to ANT properties. In this case it uses -->
    <!-- the ${basedir} property to allow Checkstyle to be run  -->
    <!-- from any directory within a project. See property      -->
    <!-- expansion,                                             -->
    <!-- http://checkstyle.sf.net/config.html#properties        -->
    <!-- <property                                              -->
    <!--     name="headerFile"                                  -->
    <!--     value="${basedir}/java.header"/>                   -->
    <!-- </module> -->


    <!-- Checks for imports                              -->
    <!-- See http://checkstyle.sf.net/config_import.html -->
    <module name="AvoidStarImport">
      <property name="excludes" value=""/>
      <property name="allowClassImports" value="false"/>
      <property name="allowStaticMemberImports" value="true"/>
    </module>
    <!-- defaults to sun.* packages -->
    <module name="IllegalImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="LineLength">
      <property name="ignorePattern" value="^$"/>
      <property name="max" value="200"/>
    </module>

    <module name="MethodCount">
      <property name="maxTotal" value="100"/>
      <property name="maxPrivate" value="100"/>
      <property name="maxPackage" value="100"/>
      <property name="maxProtected" value="100"/>
      <property name="maxPublic" value="100"/>
    </module>
    <module name="MethodLength">
      <property name="max" value="150"/>
      <property name="countEmpty" value="true"/>
      <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
    </module>
    <!--<module name="ParameterNumber">
        <property name="max" value="7"/>
        <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
    </module>-->


    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="EmptyForIteratorPad">
      <property name="option" value="nospace"/>
    </module>
    <module name="MethodParamPad">
      <property name="allowLineBreaks" value="false"/>
      <property name="option" value="nospace"/>
      <property name="tokens" value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL "/>
    </module>
    <module name="NoWhitespaceAfter">
      <property name="allowLineBreaks" value="true"/>
      <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
    </module>
    <module name="NoWhitespaceBefore">
      <property name="allowLineBreaks" value="false"/>
      <property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
    </module>
    <module name="OperatorWrap">
      <property name="severity" value="ignore"/>
      <property name="option" value="nl"/>
      <property name="tokens" value="BAND, BOR, BSR, BXOR, COLON, DIV,
                                           EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF,
                                           LOR, LT, MINUS, MOD, NOT_EQUAL,
                                           PLUS, QUESTION, SL, SR, STAR"/>
    </module>
    <module name="ParenPad">
      <property name="option" value="nospace"/>
      <property name="tokens" value="CTOR_CALL, LPAREN, METHOD_CALL, RPAREN, SUPER_CTOR_CALL"/>
    </module>
    <module name="TypecastParenPad">
      <property name="option" value="nospace"/>
      <property name="tokens" value="TYPECAST, RPAREN"/>
    </module>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>
    <module name="GenericWhitespace"/>

    <!-- Modifier Checks                                    -->
    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See http://checkstyle.sf.net/config_blocks.html -->
    <module name="AvoidNestedBlocks">
      <property name="allowInSwitchCase" value="false"/>
    </module>
    <module name="EmptyBlock">
      <property name="option" value="stmt"/>
      <property name="tokens" value="LITERAL_CATCH, LITERAL_DO,
                                           LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR,
                                           LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT"/>
    </module>
    <!--<module name="LeftCurly"/>-->
    <module name="NeedBraces"/>
    <!--<module name="RightCurly"/>-->


    <!-- Checks for common coding problems               -->
    <!-- See http://checkstyle.sf.net/config_coding.html -->
    <!--<module name="AvoidInlineConditionals"/>-->
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <module name="HiddenField">
      <property name="ignoreSetter" value="true"/>
      <property name="ignoreConstructorParameter" value="true"/>
    </module>
    <module name="IllegalInstantiation"/>
    <module name="InnerAssignment"/>
    <!--<module name="MagicNumber"/>-->
    <module name="MissingSwitchDefault"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StringLiteralEquality"/>
    <module name="SuperClone"/>
    <module name="SuperFinalize"/>
    <module name="UnnecessaryParentheses"/>
    <!-- Checks for class design                         -->
    <!-- See http://checkstyle.sf.net/config_design.html -->
    <!--<module name="DesignForExtension"/>-->
    <!--<module name="FinalClass"/>-->
    <!--<module name="HideUtilityClassConstructor"/>-->
    <module name="InterfaceIsType"/>
    <module name="VisibilityModifier"/>

    <!-- Checks that classes that define a covariant equals() method also override method equals(java.lang.Object). !-->
    <!-- See http://checkstyle.sf.net/config_coding.html !-->
    <module name="CovariantEquals"/>
    <!-- Check that the default is after all the cases in a switch statement. !-->
    <!-- See http://checkstyle.sf.net/config_coding.html !-->
    <module name="DefaultComesLast"/>
    <module name="NoFinalizer"/>
    <module name="PackageDeclaration"/>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="ArrayTypeStyle">
      <property name="javaStyle" value="true"/>
    </module>
    <!--<module name="FinalParameters"/>-->
    <!--<module name="TodoComment"/>-->
    <module name="UpperEll"/>
    <module name="OuterTypeFilename"/>

  </module>

  <!-- Support @SuppressWarnings (added in Checkstyle 5.7) -->
  <!-- see http://checkstyle.sourceforge.net/config.html#SuppressWarningsFilter -->
  <module name="SuppressWarningsFilter"/>

  <!-- Checks properties file for a duplicated properties. -->
  <!-- See http://checkstyle.sourceforge.net/config_misc.html#UniqueProperties -->
  <module name="UniqueProperties"/>

</module>